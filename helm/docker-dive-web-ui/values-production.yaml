# Example values for production deployment
replicaCount: 2

image:
  frontend:
    repository: your-registry/dive-inspector-frontend
    pullPolicy: Always
    tag: "v1.0.0"
  backend:
    repository: your-registry/dive-inspector-backend
    pullPolicy: Always
    tag: "v1.0.0"

# Production service configuration
service:
  type: ClusterIP
  frontend:
    port: 80
    targetPort: 80
  backend:
    port: 3000
    targetPort: 3000

# Enable ingress for external access
ingress:
  enabled: true
  className: nginx
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
  hosts:
    - host: dive.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: dive-tls-secret
      hosts:
        - dive.yourdomain.com

# Production resource limits
resources:
  frontend:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  backend:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

# Enable autoscaling
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Production persistence configuration
persistence:
  enabled: true
  storageClass: "fast-ssd"
  accessMode: ReadWriteOnce
  size: 5Gi

# Enhanced health checks
healthCheck:
  enabled: true
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 3

# Security configurations
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
    - ALL

# Node affinity for production workloads
affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: node-role.kubernetes.io/worker
          operator: In
          values:
          - "true"
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - docker-dive-web-ui
        topologyKey: kubernetes.io/hostname

# Tolerations for dedicated nodes
tolerations:
  - key: "dedicated"
    operator: "Equal"
    value: "docker-tools"
    effect: "NoSchedule"
