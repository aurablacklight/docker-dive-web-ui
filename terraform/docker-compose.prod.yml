# =============================================================================
# PRODUCTION DOCKER COMPOSE CONFIGURATION
# Optimized for secure cloud deployment
# =============================================================================

services:
  backend:
    image: node:18-alpine
    container_name: dive-inspector-backend
    restart: unless-stopped
    working_dir: /app
    
    environment:
      - NODE_ENV=production
      - PORT=3000
      - CORS_ORIGIN=https://${DOMAIN_NAME:-localhost}
    
    volumes:
      # Mount source code (you'll need to copy your source to the server)
      - ./backend:/app
      # Mount Docker socket for dive to access Docker daemon
      - /var/run/docker.sock:/var/run/docker.sock
      # Persistent storage for temporary files
      - ./temp:/app/temp
      - ./logs:/app/logs
    
    ports:
      - "127.0.0.1:3000:3000"
    
    networks:
      - dive-network
    
    command: >
      sh -c "
        npm install &&
        npm start
      "
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    image: node:18-alpine
    container_name: dive-inspector-frontend
    restart: unless-stopped
    working_dir: /app
    
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://${DOMAIN_NAME:-localhost}/api
      - REACT_APP_WS_URL=wss://${DOMAIN_NAME:-localhost}
    
    volumes:
      # Mount source code
      - ./frontend:/app
      # Persistent storage for built assets
      - ./frontend/dist:/app/dist
    
    ports:
      - "127.0.0.1:3001:3001"
    
    depends_on:
      backend:
        condition: service_healthy
    
    networks:
      - dive-network
    
    command: >
      sh -c "
        npm install &&
        npm run build &&
        npm start
      "
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  dive-network:
    driver: bridge
    name: dive-inspector-network

volumes:
  dive-temp:
    driver: local
    name: dive-inspector-temp
  
  dive-logs:
    driver: local
    name: dive-inspector-logs
