    - name: 🚀 Deploy via SSM
      run: |
        echo "🚀 Executing deployment on EC2 instance..."
        
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids "${{ steps.instance.outputs.instance-id }}" \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "set -e",
            "echo \"🚀 Starting deployment on $(date)\"", 
            "cd /opt/dive-inspector",
            "CURRENT_COMMIT=$(git rev-parse HEAD)",
            "echo \"📝 Current commit: $CURRENT_COMMIT\"",
            "git fetch origin",
            "git reset --hard origin/main", 
            "NEW_COMMIT=$(git rev-parse HEAD)",
            "echo \"📝 New commit: $NEW_COMMIT\"",
            "if [ \"$CURRENT_COMMIT\" = \"$NEW_COMMIT\" ]; then echo \"ℹ️ No changes detected\"; exit 0; fi",
            "echo \"🔑 Logging into JFrog...\"",
            "echo ${{ secrets.JF_ACCESS_TOKEN }} | docker login aurablacklight.jfrog.io -u ${{ github.actor }} --password-stdin",
            "echo \"📝 Updating image tags...\"",
            "sed -i \"s|dive-inspector-backend:latest|${{ needs.ci.outputs.backend-image }}|g\" docker-compose.yml",
            "sed -i \"s|dive-inspector-frontend:latest|${{ needs.ci.outputs.frontend-image }}|g\" docker-compose.yml",
            "echo \"🏥 Health check...\"",
            "curl -f http://localhost:3000/api/health || echo \"⚠️ Service unhealthy\"",
            "echo \"📦 Pulling images...\"", 
            "docker compose pull",
            "echo \"🔄 Restarting...\"",
            "docker compose up -d",
            "sleep 10",
            "echo \"🏥 Post-deployment check...\"",
            "for i in {1..30}; do if curl -f http://localhost:3000/api/health >/dev/null 2>&1; then echo \"✅ Healthy!\"; break; fi; sleep 2; done",
            "echo \"🎉 Deployment complete!\"",
            "docker compose ps"
          ]' \
          --output text \
          --query "Command.CommandId")
        
        echo "✅ Deployment command sent: $COMMAND_ID"
        
        # Wait for command completion
        echo "⏳ Waiting for deployment to complete..."
        
        for i in {1..60}; do
          STATUS=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ steps.instance.outputs.instance-id }}" \
            --query "Status" \
            --output text 2>/dev/null || echo "InProgress")
            
          echo "📊 Status: $STATUS"
          
          if [ "$STATUS" = "Success" ]; then
            echo "✅ Deployment completed successfully!"
            break
          elif [ "$STATUS" = "Failed" ]; then
            echo "❌ Deployment failed!"
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ steps.instance.outputs.instance-id }}" \
              --query "StandardErrorContent" \
              --output text
            exit 1
          elif [ $i -eq 60 ]; then
            echo "❌ Deployment timed out after 10 minutes"
            exit 1
          fi
          
          sleep 10
        done
        
        # Get deployment output
        echo "📋 Deployment output:"
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ steps.instance.outputs.instance-id }}" \
          --query "StandardOutputContent" \
          --output text
          
    - name: 🏥 Final health check
      run: |
        echo "🔍 Final health check against public endpoint..."
        
        # Check production endpoint through Cloudflare
        if curl -f -k "https://dive.docker-senpai.dev/api/health" > /dev/null 2>&1; then
          echo "✅ Production health check passed!"
        else
          echo "⚠️ Production health check failed (might be DNS propagation)"
        fi
        
    - name: 📊 Deployment summary
      run: |
        echo "## 🎉 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ Build | ✅ Success |" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| 🚀 Deployment | ✅ Success |" >> $GITHUB_STEP_SUMMARY
        echo "| 🏥 Health Check | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| 📦 Registry | JFrog Artifactory |" >> $GITHUB_STEP_SUMMARY
        echo "| 🌐 Live URL | https://dive.docker-senpai.dev |" >> $GITHUB_STEP_SUMMARY
