name: üè• Health Monitor

on:
  schedule:
    # Run every 2 hours (12 times/day = ~360 runs/month)
    # This keeps us well within GitHub Free tier limits
    - cron: '0 */2 * * *'
  workflow_dispatch:
    inputs:
      alert_threshold:
        description: 'Consecutive failures before alert'
        required: false
        default: '3'
        type: string

env:
  AWS_REGION: us-east-1
  EC2_INSTANCE_TAG: dive-inspector-server
  HEALTH_ENDPOINT: "https://dive.docker-senpai.dev/api/health"

jobs:
  health-check:
    name: üè• Service Health Check
    runs-on: ubuntu-latest
    
    steps:
    - name: üîß Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_CICD_GITHUB_ACTIONS_USERID }}
        aws-secret-access-key: ${{ secrets.AWS_CICD_GITHUB_ACTIONS_ACCESSKEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: üè• Production health check
      id: health
      run: |
        echo "üîç Checking production health endpoint..."
        
        # Multiple health checks with different methods
        HEALTH_SCORE=0
        
        # 1. Basic HTTP health check
        if curl -f -s --max-time 10 "${{ env.HEALTH_ENDPOINT }}" > /dev/null; then
          echo "‚úÖ HTTP health check: PASS"
          HEALTH_SCORE=$((HEALTH_SCORE + 1))
        else
          echo "‚ùå HTTP health check: FAIL"
        fi
        
        # 2. Response time check (should be under 2 seconds)
        RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" --max-time 10 "${{ env.HEALTH_ENDPOINT }}" || echo "999")
        if (( $(echo "$RESPONSE_TIME < 2.0" | bc -l) )); then
          echo "‚úÖ Response time check: ${RESPONSE_TIME}s (PASS)"
          HEALTH_SCORE=$((HEALTH_SCORE + 1))
        else
          echo "‚ùå Response time check: ${RESPONSE_TIME}s (FAIL - too slow)"
        fi
        
        # 3. Status code check
        STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "${{ env.HEALTH_ENDPOINT }}" || echo "000")
        if [ "$STATUS_CODE" = "200" ]; then
          echo "‚úÖ Status code check: $STATUS_CODE (PASS)"
          HEALTH_SCORE=$((HEALTH_SCORE + 1))
        else
          echo "‚ùå Status code check: $STATUS_CODE (FAIL)"
        fi
        
        # 4. Content validation (check for expected response)
        CONTENT=$(curl -f -s --max-time 10 "${{ env.HEALTH_ENDPOINT }}" || echo "")
        if echo "$CONTENT" | grep -q "ok\|healthy\|running"; then
          echo "‚úÖ Content validation: PASS"
          HEALTH_SCORE=$((HEALTH_SCORE + 1))
        else
          echo "‚ùå Content validation: FAIL (unexpected content: $CONTENT)"
        fi
        
        echo "üìä Health score: $HEALTH_SCORE/4"
        echo "health-score=$HEALTH_SCORE" >> $GITHUB_OUTPUT
        echo "response-time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
        echo "status-code=$STATUS_CODE" >> $GITHUB_OUTPUT
        
        # Set overall health status
        if [ $HEALTH_SCORE -ge 3 ]; then
          echo "overall-status=healthy" >> $GITHUB_OUTPUT
          echo "‚úÖ Overall status: HEALTHY"
        else
          echo "overall-status=unhealthy" >> $GITHUB_OUTPUT
          echo "‚ùå Overall status: UNHEALTHY"
        fi
        
    - name: üîç Get EC2 instance status
      id: ec2-status
      if: steps.health.outputs.overall-status == 'unhealthy'
      run: |
        echo "üîç Checking EC2 instance status..."
        
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=${{ env.EC2_INSTANCE_TAG }}" \
                    "Name=instance-state-name,Values=running,stopped,stopping,pending" \
          --query "Reservations[0].Instances[0].InstanceId" \
          --output text)
        
        if [ "$INSTANCE_ID" = "None" ] || [ "$INSTANCE_ID" = "null" ]; then
          echo "‚ùå No EC2 instance found with tag: ${{ env.EC2_INSTANCE_TAG }}"
          echo "instance-status=not-found" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        INSTANCE_STATE=$(aws ec2 describe-instances \
          --instance-ids "$INSTANCE_ID" \
          --query "Reservations[0].Instances[0].State.Name" \
          --output text)
          
        echo "üìä EC2 Instance: $INSTANCE_ID"
        echo "üìä State: $INSTANCE_STATE"
        echo "instance-id=$INSTANCE_ID" >> $GITHUB_OUTPUT
        echo "instance-status=$INSTANCE_STATE" >> $GITHUB_OUTPUT
        
    - name: üîÑ Auto-restart unhealthy services
      if: steps.health.outputs.overall-status == 'unhealthy' && steps.ec2-status.outputs.instance-status == 'running'
      run: |
        echo "üîÑ Attempting automatic service restart..."
        
        # Send restart command via SSM
        aws ssm send-command \
          --instance-ids "${{ steps.ec2-status.outputs.instance-id }}" \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=["
            echo \"üîÑ Auto-restart initiated by health monitor\"
            cd /opt/dive-inspector
            
            # Check current service status
            echo \"üìä Current service status:\"
            sudo docker-compose ps
            
            # Check logs for errors
            echo \"üìã Recent error logs:\"
            sudo docker-compose logs --tail=20 backend | grep -i error || echo \"No recent errors found\"
            
            # Restart services
            echo \"üîÑ Restarting services...\"
            sudo docker-compose restart
            
            # Wait and verify
            sleep 15
            
            # Health check
            if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
              echo \"‚úÖ Auto-restart successful - service is healthy\"
              echo \"\$(date): Auto-restart SUCCESS\" >> /var/log/dive-inspector-health.log
            else
              echo \"‚ùå Auto-restart failed - service still unhealthy\"
              echo \"\$(date): Auto-restart FAILED\" >> /var/log/dive-inspector-health.log
            fi
            
            echo \"üìä Final service status:\"
            sudo docker-compose ps
          "]' \
          --output text \
          --query "Command.CommandId" > restart_command_id.txt
          
        RESTART_COMMAND_ID=$(cat restart_command_id.txt)
        echo "üìù Restart command ID: $RESTART_COMMAND_ID"
        
        # Wait for restart to complete
        echo "‚è≥ Waiting for restart to complete..."
        sleep 30
        
        # Check restart status
        RESTART_STATUS=$(aws ssm get-command-invocation \
          --command-id "$RESTART_COMMAND_ID" \
          --instance-id "${{ steps.ec2-status.outputs.instance-id }}" \
          --query "Status" \
          --output text 2>/dev/null || echo "InProgress")
          
        echo "üìä Restart status: $RESTART_STATUS"
        
        if [ "$RESTART_STATUS" = "Success" ]; then
          echo "‚úÖ Auto-restart completed"
        else
          echo "‚ùå Auto-restart may have failed"
        fi
        
    - name: üìä Health monitoring summary
      run: |
        echo "## üè• Health Monitor Report" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| üè• Overall Status | ${{ steps.health.outputs.overall-status == 'healthy' && '‚úÖ Healthy' || '‚ùå Unhealthy' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| üìä Health Score | ${{ steps.health.outputs.health-score }}/4 |" >> $GITHUB_STEP_SUMMARY
        echo "| ‚è±Ô∏è Response Time | ${{ steps.health.outputs.response-time }}s |" >> $GITHUB_STEP_SUMMARY
        echo "| üåê Status Code | ${{ steps.health.outputs.status-code }} |" >> $GITHUB_STEP_SUMMARY
        echo "| üïê Check Time | $(date -u) UTC |" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.health.outputs.overall-status }}" = "unhealthy" ]; then
          echo "| üö® Action Taken | Auto-restart attempted |" >> $GITHUB_STEP_SUMMARY
          echo "| üñ•Ô∏è EC2 Status | ${{ steps.ec2-status.outputs.instance-status }} |" >> $GITHUB_STEP_SUMMARY
        fi
        
    # Note: GitHub issue creation disabled to avoid permission issues
    # Health monitoring and auto-restart functionality still active
    - name: üìù Log health status
      if: steps.health.outputs.overall-status == 'unhealthy'
      run: |
        echo "üö® Health Alert: Service unhealthy but auto-restart attempted"
        echo "Check GitHub Actions summary for details"
        
    - name: ‚úÖ Log healthy status
      if: steps.health.outputs.overall-status == 'healthy'
      run: |
        echo "‚úÖ Service is healthy - all systems operational"
